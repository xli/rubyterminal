
= RubyTerminal -- A ruby environment terminal for program

RubyTerminal prepares a ruby runtime environment for launching new ruby process instantly.
For example, a big Rails project may need 5 seconds to launch a test process even you just
run simple method test which just cost 0.1 second when you are doing TDD. RubyTerminal can
help you get rid of this kind waiting.

== How it works

Start RubyTerminal by the following command after installed rubyterminal gem:

  rt <ruby_environment_script_file_path>

After RubyTerminal started, it will create a '.terminal.running' file to mark it's launching
directory, the file would be deleted after RubyTerminal shutdown. 
Then RubyTerminal starts look for a file called '.terminal.input' in it's launching directory
and read it's content as command to execute in a forked process. The output of command
execution would be put into another file called '.terminal.output' in the same directory.

There are two model to create a '.terminal.input' by RubyTerminal, one is a command could be
used in a terminal called 'ert', another one is a ruby file could be loaded in a ruby script.

=== Execute ruby script in RubyTerminal by injecting 'ert' inside the script

Put the following code in first line code would be run before your ruby code, e.g. first
line in test_helper.rb:

  require 'ert'

When RubyTerminal is detected by the script, it will create a '.terminal.input' file with
current script execution command and arguments, then wait for execution output and exit
when the '.terminal.input' file gone, which is deleted by the RubyTerminal usually after
the execution finished.

=== Execute ruby script in RubyTerminal by a terminal ert command

ert has same usage with ruby expect you should not type in 'ruby', for example:

  ert test/unit/blabla_test.rb -n test_method_blabla

And you also could run this command inside sub-directory of the RubyTerminal launching
directory:

  You RubyTerminal may launch at /User/xx/project
  You could run ert at /User/xx/project/test/unit

== Working Example:

My project got problem with spending too much time to wait for rails test process starts.
My test just need 1 sec to run, but the process need 3 sec to launch. As many time as I
run my test, as much time as I waste on waiting on launching the process.

As a big project, it's environment probably is complicated. You should have a config/environment.rb
to setup your Rails project environment as you need, but it maybe not all what you want to
cache in RubyTerminal, because there maybe lot of models have been loaded, and cache those
classes may cause you restart RubyTerminal again and again during development.

So, I think it's better to provide an independent environment initialization script called
'test_const_environment.rb' inside 'test' directory. It requires everything could be cached
for my test while I am running tests in development usually. There maybe some duplication
with config/environment.rb, you could do some refactoring to get it better.
Also, I added the following code as first line code of test/test_const_environment.rb

  require 'ert'

Then, start RubyTerminal in my project root directory with my test/test_const_environment.rb
when I am developing.

  rt test/test_const_environment.rb

Done. Develop as usual.

== Limitation

As RubyTerminal loads your ruby environment script as cache, and forks a new process to execute
you ruby script, anything loaded by your ruby environment script would not be reloaded unless you
do it in your ruby execution script. For example, if you load your 'test/test_helper.rb' in
RubyTerminal 'rt test/test_helper.rb', and if your test_helper.rb loads some project model, for
example, we want messaging model be disabled in test:

  Messaging.disable

Then nay change inside Messaging model would not be reloaded in RubyTerminal. In this case,
you'll need to restart RubyTerminal to launch new environment.

= Other stuff

Author: Li Xiao <iam@li-xiao.com>

Requires: Ruby 1.8.6 or later

License: Copyright 2010 by Li Xiao.
         Released under an MIT-LICENSE.  See the LICENSE file
         included in the distribution.

== Warranty

This software is provided "as is" and without any express or
implied warranties, including, without limitation, the implied
warranties of merchantibility and fitness for a particular
purpose.
