
= RubyTerminal -- A program communicating ruby terminal

RubyTerminal arms to prepare a ruby runtime environment for a program to launch new ruby
process instantly.
Anytime you got problem of spending too much time on launching ruby process frequently,
RubyTerminal could be your choice.

== How it works

Start RubyTerminal by the following command after installed rubyterminal gem:

  rt <ruby_environment_script_file_path>

After RubyTerminal started, it will create a '.terminal.running' file to mark it's launching
directory, the file would be deleted after RubyTerminal shutdown. 
Then RubyTerminal starts look for a file called '.terminal.input' in it's launching directory
and read it's content as command to execute in a forked process. The output of command
execution would be put into another file called '.terminal.output' in the same directory.

There are two model to create a '.terminal.input' by RubyTerminal, one is a command could be
used in a terminal called 'ert', another one is a ruby file could be loaded in a ruby script.

=== Execute ruby script in RubyTerminal by injecting 'ert' inside the script

Put the following code in first line code would be run before your ruby code, e.g. first
line in test_helper.rb:

  require 'ert'

When RubyTerminal is detected by the script, it will create a '.terminal.input' file with
current script execution command and arguments, then wait for execution output and exit
when the '.terminal.input' file gone, which is deleted by the RubyTerminal usually after
the execution finished.

=== Execute ruby script in RubyTerminal by a terminal ert command

ert has same usage with ruby expect you should not type in 'ruby', for example:

  ert test/unit/blabla_test.rb -n test_method_blabla

And you also could run this command inside sub-directory of the RubyTerminal launching
directory:

  You RubyTerminal may launch at /User/xx/project
  You could run ert at /User/xx/project/test/unit

== Working Example:

My project got problem with spending too much time to wait for rails test process starts.
My test just need 1 sec to run, but the process need 3 sec to launch. As many time as I
run my test, as much time as I waste on waiting on launching the process.

Setup my project by adding one line code into first line code into test_helper.rb

  require 'ert'

Then, Start RubyTerminal in my project root directory with my test environment file test_helper.rb
when I am developing.

  rt test/test_helper.rb

Done. Develop as usual.

== Limitation

As RubyTerminal loads your ruby environment script as cache, and forks a new process for execute
you ruby script. Anything loaded by your ruby environment script would not be reloaded unless you
do it in your ruby execution script. For example, your 'test/test_helper.rb' probably has the following
code:

  require File.expand_path(File.dirname(__FILE__) + "/../config/environment")

So, any change in side your config/environment.rb would not be loaded in RubyTerminal. In this
case, you should restart RubyTerminal to launch new environment.

And for the way how 'require' works in ruby, I highly recommand you require all file in file path.
If you require your environment as above, and use the following line to require it again in your
ruby execution script:

  require 'config/environment'

You would cause the 'config/environment' be reloaded inside your ruby execution script, which actually
cause you wait for long time launching the process.

= Other stuff

Author: Li Xiao <iam@li-xiao.com>

Requires: Ruby 1.8.6 or later

License: Copyright 2010 by Li Xiao.
         Released under an MIT-LICENSE.  See the LICENSE file
         included in the distribution.

== Warranty

This software is provided "as is" and without any express or
implied warranties, including, without limitation, the implied
warranties of merchantibility and fitness for a particular
purpose.
